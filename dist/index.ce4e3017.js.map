{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["\"use strict\";\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// BANKIST APP\n/////////////////////////////////////////////////\n// Data\n// DIFFERENT DATA! Contains movement dates, currency and locale\nconst account1 = {\n    owner: \"Jonas Schmedtmann\",\n    movements: [\n        200,\n        455.23,\n        -306.5,\n        25000,\n        -642.21,\n        -133.9,\n        79.97,\n        1300\n    ],\n    interestRate: 1.2,\n    pin: 1111,\n    movementsDates: [\n        \"2019-11-18T21:31:17.178Z\",\n        \"2019-12-23T07:42:02.383Z\",\n        \"2020-01-28T09:15:04.904Z\",\n        \"2023-08-01T10:17:24.185Z\",\n        \"2023-08-09T14:11:59.604Z\",\n        \"2023-08-10T17:01:17.194Z\",\n        \"2023-08-11T23:36:17.929Z\",\n        \"2023-08-12T10:51:36.790Z\"\n    ],\n    currency: \"EUR\",\n    locale: \"pt-PT\"\n};\nconst account2 = {\n    owner: \"Jessica Davis\",\n    movements: [\n        5000,\n        3400,\n        -150,\n        -790,\n        -3210,\n        -1000,\n        8500,\n        -30\n    ],\n    interestRate: 1.5,\n    pin: 2222,\n    movementsDates: [\n        \"2019-11-01T13:15:33.035Z\",\n        \"2019-11-30T09:48:16.867Z\",\n        \"2019-12-25T06:04:23.907Z\",\n        \"2020-01-25T14:18:46.235Z\",\n        \"2020-02-05T16:33:06.386Z\",\n        \"2020-04-10T14:43:26.374Z\",\n        \"2020-06-25T18:49:59.371Z\",\n        \"2020-07-26T12:01:20.894Z\"\n    ],\n    currency: \"USD\",\n    locale: \"en-US\"\n};\nconst accounts = [\n    account1,\n    account2\n];\n/////////////////////////////////////////////////\n// Elements\nconst labelWelcome = document.querySelector(\".welcome\");\nconst labelDate = document.querySelector(\".date\");\nconst labelBalance = document.querySelector(\".balance__value\");\nconst labelSumIn = document.querySelector(\".summary__value--in\");\nconst labelSumOut = document.querySelector(\".summary__value--out\");\nconst labelSumInterest = document.querySelector(\".summary__value--interest\");\nconst labelTimer = document.querySelector(\".timer\");\nconst containerApp = document.querySelector(\".app\");\nconst containerMovements = document.querySelector(\".movements\");\nconst btnLogin = document.querySelector(\".login__btn\");\nconst btnTransfer = document.querySelector(\".form__btn--transfer\");\nconst btnLoan = document.querySelector(\".form__btn--loan\");\nconst btnClose = document.querySelector(\".form__btn--close\");\nconst btnSort = document.querySelector(\".btn--sort\");\nconst inputLoginUsername = document.querySelector(\".login__input--user\");\nconst inputLoginPin = document.querySelector(\".login__input--pin\");\nconst inputTransferTo = document.querySelector(\".form__input--to\");\nconst inputTransferAmount = document.querySelector(\".form__input--amount\");\nconst inputLoanAmount = document.querySelector(\".form__input--loan-amount\");\nconst inputCloseUsername = document.querySelector(\".form__input--user\");\nconst inputClosePin = document.querySelector(\".form__input--pin\");\n/////////////////////////////////////////////////\n// Functions\nconst formatMovementsDate = function(date, acc) {\n    const calcDaysPassed = (date1, date2)=>Math.round(Math.abs((date2 - date1) / 86400000));\n    const daysPassed = calcDaysPassed(new Date(), date);\n    console.log(daysPassed);\n    if (daysPassed === 0) return \"Today\";\n    if (daysPassed === 1) return \"Yesterday\";\n    if (daysPassed <= 7) return `${daysPassed} days ago`;\n    else // const day = `${date.getDate()}`.padStart(2, 0);\n    // const month = `${date.getMonth() + 1}`.padStart(2, 0);\n    // const year = date.getFullYear();\n    // return `${day}/${month}/${year}`;\n    return new Intl.DateTimeFormat(acc.locale).format(date);\n};\nconst formatCurrency = function(value, locale, currency) {\n    return new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency\n    }).format(value);\n};\nconst displayMovements = function(acc, sort = false) {\n    containerMovements.innerHTML = \"\";\n    const movs = sort ? acc.movements.slice().sort((a, b)=>a - b) : acc.movements;\n    movs.forEach(function(mov, i) {\n        const type = mov > 0 ? \"deposit\" : \"withdrawal\";\n        const date = new Date(acc.movementsDates[i]);\n        const displayDate = formatMovementsDate(date, acc);\n        const formattedMov = formatCurrency(mov, acc.locale, acc.currency);\n        const html = `\n      <div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${i + 1} ${type}</div>\n        <div class=\"movements__date\">${displayDate}</div>\n        <div class=\"movements__value\">${formattedMov}</div>\n      </div>\n    `;\n        containerMovements.insertAdjacentHTML(\"afterbegin\", html);\n    });\n};\nconst calcDisplayBalance = function(acc) {\n    acc.balance = acc.movements.reduce((acc, mov)=>acc + mov, 0);\n    const formattedBalance = formatCurrency(acc.balance, acc.locale, acc.currency);\n    labelBalance.textContent = `${formattedBalance}`;\n};\nconst calcDisplaySummary = function(acc) {\n    const incomes = acc.movements.filter((mov)=>mov > 0).reduce((acc, mov)=>acc + mov, 0);\n    labelSumIn.textContent = formatCurrency(incomes, acc.locale, acc.currency);\n    const out = Math.abs(acc.movements.filter((mov)=>mov < 0).reduce((acc, mov)=>acc + mov, 0));\n    labelSumOut.textContent = formatCurrency(out, acc.locale, acc.currency);\n    const interest = acc.movements.filter((mov)=>mov > 0).map((deposit)=>deposit * acc.interestRate / 100).filter((int, i, arr)=>{\n        // console.log(arr);\n        return int >= 1;\n    }).reduce((acc, int)=>acc + int, 0);\n    labelSumInterest.textContent = formatCurrency(interest, acc.locale, acc.currency);\n};\nconst createUsernames = function(accs) {\n    accs.forEach(function(acc) {\n        acc.username = acc.owner.toLowerCase().split(\" \").map((name)=>name[0]).join(\"\");\n    });\n};\ncreateUsernames(accounts);\nconst updateUI = function(acc) {\n    // Display movements\n    displayMovements(acc);\n    // Display balance\n    calcDisplayBalance(acc);\n    // Display summary\n    calcDisplaySummary(acc);\n};\n///////////////////////////////////////\n// Event handlers\nlet currentAccount, timer;\n// FAKE ALWAYS LOGIN  xD\n// currentAccount = account1;\n// updateUI(currentAccount);\n// containerApp.style.opacity = 100;\n//Experimenting API\nconst startLogoutTimer = function() {\n    const tick = function() {\n        const min = String(Math.floor(time / 60)).padStart(2, 0);\n        const sec = String(time % 60).padStart(2, 0);\n        //in each call print remaining time to UI\n        labelTimer.textContent = `${min}:${sec}`;\n        //decrease 1s\n        //when 0 seconds, stop timer and log out timer\n        if (time === 0) {\n            clearInterval(timer);\n            labelWelcome.textContent = \"Log in to get started\";\n            containerApp.style.opacity = 0;\n        }\n        time--;\n    };\n    // set time to 5 min\n    let time = 120;\n    //call timr every second\n    tick();\n    const timer = setInterval(tick, 1000);\n    return timer;\n};\nbtnLogin.addEventListener(\"click\", function(e) {\n    // Prevent form from submitting\n    e.preventDefault();\n    currentAccount = accounts.find((acc)=>acc.username === inputLoginUsername.value);\n    console.log(currentAccount);\n    if (currentAccount?.pin === Number(inputLoginPin.value)) {\n        // Display UI and message\n        labelWelcome.textContent = `Welcome back, ${currentAccount.owner.split(\" \")[0]}`;\n        // const now = new Date();\n        // const day = `${now.getDate()}`.padStart(2, 0);\n        // const month = `${now.getMonth() + 1}`.padStart(2, 0);\n        // const year = now.getFullYear();\n        // const hour = `${now.getHours()}`.padStart(2, 0);\n        // const min = `${now.getMinutes()}`.padStart(2, 0);\n        // labelDate.textContent = `${day}/${month}/${year}, ${hour}:${min}`;\n        const now = new Date();\n        const locale = currentAccount.locale;\n        const options = {\n            day: \"numeric\",\n            month: \"numeric\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\"\n        };\n        labelDate.textContent = new Intl.DateTimeFormat(locale, options).format(now);\n        containerApp.style.opacity = 100;\n        // Clear input fields\n        inputLoginUsername.value = inputLoginPin.value = \"\";\n        inputLoginPin.blur();\n        //Timer Below\n        if (timer) clearInterval(timer);\n        timer = startLogoutTimer();\n        // Update UI\n        updateUI(currentAccount);\n    }\n});\nbtnTransfer.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    const amount = Number(inputTransferAmount.value);\n    const receiverAcc = accounts.find((acc)=>acc.username === inputTransferTo.value);\n    inputTransferAmount.value = inputTransferTo.value = \"\";\n    if (amount > 0 && receiverAcc && currentAccount.balance >= amount && receiverAcc?.username !== currentAccount.username) {\n        // Doing the transfer\n        currentAccount.movements.push(-amount);\n        receiverAcc.movements.push(amount);\n        //Add Transfer Date\n        currentAccount.movementsDates.push(new Date().toISOString());\n        receiverAcc.movementsDates.push(new Date().toISOString());\n        // Update UI\n        updateUI(currentAccount);\n        //Reset the timer\n        clearInterval(timer);\n        timer = startLogoutTimer();\n    }\n});\nbtnLoan.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    const amount = Math.floor(inputLoanAmount.value);\n    if (amount > 0 && currentAccount.movements.some((mov)=>mov >= amount * 0.1)) {\n        // Add movement\n        setTimeout(function() {\n            currentAccount.movements.push(amount);\n            //Add loan date\n            currentAccount.movementsDates.push(new Date().toISOString());\n            // Update UI\n            updateUI(currentAccount);\n            //Reset the timer\n            clearInterval(timer);\n            timer = startLogoutTimer();\n        }, 2500);\n        inputLoanAmount.value = \"\";\n    }\n});\nbtnClose.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    if (inputCloseUsername.value === currentAccount.username && Number(inputClosePin.value) === currentAccount.pin) {\n        const index = accounts.findIndex((acc)=>acc.username === currentAccount.username);\n        console.log(index);\n        // .indexOf(23)\n        // Delete account\n        accounts.splice(index, 1);\n        // Hide UI\n        containerApp.style.opacity = 0;\n    }\n    inputCloseUsername.value = inputClosePin.value = \"\";\n});\nlet sorted = false;\nbtnSort.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    displayMovements(currentAccount, !sorted);\n    sorted = !sorted;\n});\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// LECTURES\n/*\n\nconst cssData = ['2rem', '3.5rem', '7rem', '1.5rem', '0.7rem'];\n\nconsole.log(Number.parseInt('23e4'));\n\nconst cssMax = Math.max(...cssData.map(cur => Number.parseFloat(cur)));\n\nconsole.log(cssMax);\n\nMath.round(2.5);\n\nMath.floor(2.5);\n\nMath.ceil(2.3);\n\n// labelBalance.addEventListener('click', function (e) {\n//   e.preventDefault();\n//   const idk = [...document.querySelectorAll('.movements__row')].forEach(\n//     function (row, i) {\n//       if (i % 2 === 0) {\n//         row.style.backgroundColor = 'lime';\n//       }\n//     }\n//   );\n// });\n\nconst now = new Date();\n\nconsole.log(now);\n\nconsole.log(new Date(account1.movementsDates[0]));\n\nconst future = new Date(2037, 10, 19, 15, 23);\n\nconsole.log(future);\n\nconsole.log(future.getFullYear());\nconsole.log(future.getMonth());\nconsole.log(future.getDate());\nconsole.log(future.getDay());\nconsole.log(future.getHours());\nconsole.log(future.getMinutes());\nconsole.log(future.getSeconds());\nconsole.log(future.toISOString());\nconsole.log(future.getTime());\n\nconsole.log(new Date(2142242580000));\n\nconsole.log(Date.now());\n\n\n*/ const future = new Date(2037, 10, 19, 15, 23);\n// console.log(+future);\n// const days1 = calcDaysPassed(new Date(2037, 3, 14), new Date(2037, 3, 24));\n// console.log(days1);\nconst num = 34572.34;\nconst options = {\n    style: \"currency\",\n    unit: \"mile-per-hour\",\n    currency: \"EUR\"\n};\nconsole.log(new Intl.NumberFormat(\"en-US\", options).format(num));\nconst ingredients = [\n    \"olives\",\n    \"spinach\"\n];\nconst pizzaTimer = setTimeout((ing1, ing2)=>console.log(`Here is ur pizzaaa with${ing1} and ${ing2}`), 3000, ...ingredients);\n// console.log(`Waiting...`);\nif (ingredients.includes(\"spinach\")) clearTimeout(pizzaTimer); // setInterval(function () {\n //   const now = new Date();\n //   console.log(`${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`);\n // }, 1000);\n\n//# sourceMappingURL=index.ce4e3017.js.map\n","'use strict';\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// BANKIST APP\n\n/////////////////////////////////////////////////\n// Data\n\n// DIFFERENT DATA! Contains movement dates, currency and locale\n\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n\n  movementsDates: [\n    '2019-11-18T21:31:17.178Z',\n    '2019-12-23T07:42:02.383Z',\n    '2020-01-28T09:15:04.904Z',\n    '2023-08-01T10:17:24.185Z',\n    '2023-08-09T14:11:59.604Z',\n    '2023-08-10T17:01:17.194Z',\n    '2023-08-11T23:36:17.929Z',\n    '2023-08-12T10:51:36.790Z',\n  ],\n  currency: 'EUR',\n  locale: 'pt-PT', // de-DE\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n\n  movementsDates: [\n    '2019-11-01T13:15:33.035Z',\n    '2019-11-30T09:48:16.867Z',\n    '2019-12-25T06:04:23.907Z',\n    '2020-01-25T14:18:46.235Z',\n    '2020-02-05T16:33:06.386Z',\n    '2020-04-10T14:43:26.374Z',\n    '2020-06-25T18:49:59.371Z',\n    '2020-07-26T12:01:20.894Z',\n  ],\n  currency: 'USD',\n  locale: 'en-US',\n};\n\nconst accounts = [account1, account2];\n\n/////////////////////////////////////////////////\n// Elements\nconst labelWelcome = document.querySelector('.welcome');\nconst labelDate = document.querySelector('.date');\nconst labelBalance = document.querySelector('.balance__value');\nconst labelSumIn = document.querySelector('.summary__value--in');\nconst labelSumOut = document.querySelector('.summary__value--out');\nconst labelSumInterest = document.querySelector('.summary__value--interest');\nconst labelTimer = document.querySelector('.timer');\n\nconst containerApp = document.querySelector('.app');\nconst containerMovements = document.querySelector('.movements');\n\nconst btnLogin = document.querySelector('.login__btn');\nconst btnTransfer = document.querySelector('.form__btn--transfer');\nconst btnLoan = document.querySelector('.form__btn--loan');\nconst btnClose = document.querySelector('.form__btn--close');\nconst btnSort = document.querySelector('.btn--sort');\n\nconst inputLoginUsername = document.querySelector('.login__input--user');\nconst inputLoginPin = document.querySelector('.login__input--pin');\nconst inputTransferTo = document.querySelector('.form__input--to');\nconst inputTransferAmount = document.querySelector('.form__input--amount');\nconst inputLoanAmount = document.querySelector('.form__input--loan-amount');\nconst inputCloseUsername = document.querySelector('.form__input--user');\nconst inputClosePin = document.querySelector('.form__input--pin');\n\n/////////////////////////////////////////////////\n// Functions\nconst formatMovementsDate = function (date, acc) {\n  const calcDaysPassed = (date1, date2) =>\n    Math.round(Math.abs((date2 - date1) / (1000 * 60 * 60 * 24)));\n\n  const daysPassed = calcDaysPassed(new Date(), date);\n  console.log(daysPassed);\n\n  if (daysPassed === 0) {\n    return 'Today';\n  }\n  if (daysPassed === 1) {\n    return 'Yesterday';\n  }\n  if (daysPassed <= 7) {\n    return `${daysPassed} days ago`;\n  } else {\n    // const day = `${date.getDate()}`.padStart(2, 0);\n    // const month = `${date.getMonth() + 1}`.padStart(2, 0);\n    // const year = date.getFullYear();\n    // return `${day}/${month}/${year}`;\n    return new Intl.DateTimeFormat(acc.locale).format(date);\n  }\n};\n\nconst formatCurrency = function (value, locale, currency) {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency,\n  }).format(value);\n};\n\nconst displayMovements = function (acc, sort = false) {\n  containerMovements.innerHTML = '';\n\n  const movs = sort\n    ? acc.movements.slice().sort((a, b) => a - b)\n    : acc.movements;\n\n  movs.forEach(function (mov, i) {\n    const type = mov > 0 ? 'deposit' : 'withdrawal';\n\n    const date = new Date(acc.movementsDates[i]);\n\n    const displayDate = formatMovementsDate(date, acc);\n\n    const formattedMov = formatCurrency(mov, acc.locale, acc.currency);\n\n    const html = `\n      <div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${\n      i + 1\n    } ${type}</div>\n        <div class=\"movements__date\">${displayDate}</div>\n        <div class=\"movements__value\">${formattedMov}</div>\n      </div>\n    `;\n\n    containerMovements.insertAdjacentHTML('afterbegin', html);\n  });\n};\n\nconst calcDisplayBalance = function (acc) {\n  acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);\n  const formattedBalance = formatCurrency(\n    acc.balance,\n    acc.locale,\n    acc.currency\n  );\n  labelBalance.textContent = `${formattedBalance}`;\n};\n\nconst calcDisplaySummary = function (acc) {\n  const incomes = acc.movements\n    .filter(mov => mov > 0)\n    .reduce((acc, mov) => acc + mov, 0);\n  labelSumIn.textContent = formatCurrency(incomes, acc.locale, acc.currency);\n\n  const out = Math.abs(\n    acc.movements.filter(mov => mov < 0).reduce((acc, mov) => acc + mov, 0)\n  );\n  labelSumOut.textContent = formatCurrency(out, acc.locale, acc.currency);\n\n  const interest = acc.movements\n    .filter(mov => mov > 0)\n    .map(deposit => (deposit * acc.interestRate) / 100)\n    .filter((int, i, arr) => {\n      // console.log(arr);\n      return int >= 1;\n    })\n    .reduce((acc, int) => acc + int, 0);\n  labelSumInterest.textContent = formatCurrency(\n    interest,\n    acc.locale,\n    acc.currency\n  );\n};\n\nconst createUsernames = function (accs) {\n  accs.forEach(function (acc) {\n    acc.username = acc.owner\n      .toLowerCase()\n      .split(' ')\n      .map(name => name[0])\n      .join('');\n  });\n};\ncreateUsernames(accounts);\n\nconst updateUI = function (acc) {\n  // Display movements\n  displayMovements(acc);\n\n  // Display balance\n  calcDisplayBalance(acc);\n\n  // Display summary\n  calcDisplaySummary(acc);\n};\n\n///////////////////////////////////////\n// Event handlers\nlet currentAccount, timer;\n\n// FAKE ALWAYS LOGIN  xD\n// currentAccount = account1;\n// updateUI(currentAccount);\n// containerApp.style.opacity = 100;\n\n//Experimenting API\n\nconst startLogoutTimer = function () {\n  const tick = function () {\n    const min = String(Math.floor(time / 60)).padStart(2, 0);\n    const sec = String(time % 60).padStart(2, 0);\n    //in each call print remaining time to UI\n\n    labelTimer.textContent = `${min}:${sec}`;\n\n    //decrease 1s\n\n    //when 0 seconds, stop timer and log out timer\n\n    if (time === 0) {\n      clearInterval(timer);\n      labelWelcome.textContent = 'Log in to get started';\n      containerApp.style.opacity = 0;\n    }\n\n    time--;\n  };\n  // set time to 5 min\n  let time = 120;\n\n  //call timr every second\n  tick();\n  const timer = setInterval(tick, 1000);\n  return timer;\n};\n\nbtnLogin.addEventListener('click', function (e) {\n  // Prevent form from submitting\n  e.preventDefault();\n\n  currentAccount = accounts.find(\n    acc => acc.username === inputLoginUsername.value\n  );\n  console.log(currentAccount);\n\n  if (currentAccount?.pin === Number(inputLoginPin.value)) {\n    // Display UI and message\n    labelWelcome.textContent = `Welcome back, ${\n      currentAccount.owner.split(' ')[0]\n    }`;\n    // const now = new Date();\n    // const day = `${now.getDate()}`.padStart(2, 0);\n    // const month = `${now.getMonth() + 1}`.padStart(2, 0);\n    // const year = now.getFullYear();\n    // const hour = `${now.getHours()}`.padStart(2, 0);\n    // const min = `${now.getMinutes()}`.padStart(2, 0);\n\n    // labelDate.textContent = `${day}/${month}/${year}, ${hour}:${min}`;\n    const now = new Date();\n    const locale = currentAccount.locale;\n    const options = {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n    };\n    labelDate.textContent = new Intl.DateTimeFormat(locale, options).format(\n      now\n    );\n    containerApp.style.opacity = 100;\n\n    // Clear input fields\n    inputLoginUsername.value = inputLoginPin.value = '';\n    inputLoginPin.blur();\n\n    //Timer Below\n\n    if (timer) clearInterval(timer);\n    timer = startLogoutTimer();\n\n    // Update UI\n    updateUI(currentAccount);\n  }\n});\n\nbtnTransfer.addEventListener('click', function (e) {\n  e.preventDefault();\n  const amount = Number(inputTransferAmount.value);\n  const receiverAcc = accounts.find(\n    acc => acc.username === inputTransferTo.value\n  );\n  inputTransferAmount.value = inputTransferTo.value = '';\n\n  if (\n    amount > 0 &&\n    receiverAcc &&\n    currentAccount.balance >= amount &&\n    receiverAcc?.username !== currentAccount.username\n  ) {\n    // Doing the transfer\n    currentAccount.movements.push(-amount);\n    receiverAcc.movements.push(amount);\n\n    //Add Transfer Date\n\n    currentAccount.movementsDates.push(new Date().toISOString());\n    receiverAcc.movementsDates.push(new Date().toISOString());\n\n    // Update UI\n    updateUI(currentAccount);\n\n    //Reset the timer\n    clearInterval(timer);\n    timer = startLogoutTimer();\n  }\n});\n\nbtnLoan.addEventListener('click', function (e) {\n  e.preventDefault();\n\n  const amount = Math.floor(inputLoanAmount.value);\n\n  if (amount > 0 && currentAccount.movements.some(mov => mov >= amount * 0.1)) {\n    // Add movement\n    setTimeout(function () {\n      currentAccount.movements.push(amount);\n\n      //Add loan date\n      currentAccount.movementsDates.push(new Date().toISOString());\n\n      // Update UI\n      updateUI(currentAccount);\n\n      //Reset the timer\n      clearInterval(timer);\n      timer = startLogoutTimer();\n    }, 2500);\n    inputLoanAmount.value = '';\n  }\n});\n\nbtnClose.addEventListener('click', function (e) {\n  e.preventDefault();\n\n  if (\n    inputCloseUsername.value === currentAccount.username &&\n    Number(inputClosePin.value) === currentAccount.pin\n  ) {\n    const index = accounts.findIndex(\n      acc => acc.username === currentAccount.username\n    );\n    console.log(index);\n    // .indexOf(23)\n\n    // Delete account\n    accounts.splice(index, 1);\n\n    // Hide UI\n    containerApp.style.opacity = 0;\n  }\n\n  inputCloseUsername.value = inputClosePin.value = '';\n});\n\nlet sorted = false;\nbtnSort.addEventListener('click', function (e) {\n  e.preventDefault();\n  displayMovements(currentAccount, !sorted);\n  sorted = !sorted;\n});\n\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////\n// LECTURES\n\n/*\n\nconst cssData = ['2rem', '3.5rem', '7rem', '1.5rem', '0.7rem'];\n\nconsole.log(Number.parseInt('23e4'));\n\nconst cssMax = Math.max(...cssData.map(cur => Number.parseFloat(cur)));\n\nconsole.log(cssMax);\n\nMath.round(2.5);\n\nMath.floor(2.5);\n\nMath.ceil(2.3);\n\n// labelBalance.addEventListener('click', function (e) {\n//   e.preventDefault();\n//   const idk = [...document.querySelectorAll('.movements__row')].forEach(\n//     function (row, i) {\n//       if (i % 2 === 0) {\n//         row.style.backgroundColor = 'lime';\n//       }\n//     }\n//   );\n// });\n\nconst now = new Date();\n\nconsole.log(now);\n\nconsole.log(new Date(account1.movementsDates[0]));\n\nconst future = new Date(2037, 10, 19, 15, 23);\n\nconsole.log(future);\n\nconsole.log(future.getFullYear());\nconsole.log(future.getMonth());\nconsole.log(future.getDate());\nconsole.log(future.getDay());\nconsole.log(future.getHours());\nconsole.log(future.getMinutes());\nconsole.log(future.getSeconds());\nconsole.log(future.toISOString());\nconsole.log(future.getTime());\n\nconsole.log(new Date(2142242580000));\n\nconsole.log(Date.now());\n\n\n*/\n\nconst future = new Date(2037, 10, 19, 15, 23);\n\n// console.log(+future);\n\n// const days1 = calcDaysPassed(new Date(2037, 3, 14), new Date(2037, 3, 24));\n\n// console.log(days1);\n\nconst num = 34572.34;\n\nconst options = {\n  style: 'currency',\n  unit: 'mile-per-hour',\n  currency: 'EUR',\n};\n\nconsole.log(new Intl.NumberFormat('en-US', options).format(num));\n\nconst ingredients = ['olives', 'spinach'];\nconst pizzaTimer = setTimeout(\n  (ing1, ing2) => console.log(`Here is ur pizzaaa with${ing1} and ${ing2}`),\n  3 * 1000,\n  ...ingredients\n);\n// console.log(`Waiting...`);\n\nif (ingredients.includes('spinach')) clearTimeout(pizzaTimer);\n\n// setInterval(function () {\n//   const now = new Date();\n//   console.log(`${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`);\n// }, 1000);\n"],"names":["currentAccount","timer","accounts","owner","movements","interestRate","pin","movementsDates","currency","locale","labelWelcome","document","querySelector","labelDate","labelBalance","labelSumIn","labelSumOut","labelSumInterest","labelTimer","containerApp","containerMovements","btnLogin","btnTransfer","btnLoan","btnClose","btnSort","inputLoginUsername","inputLoginPin","inputTransferTo","inputTransferAmount","inputLoanAmount","inputCloseUsername","inputClosePin","formatMovementsDate","date","acc","daysPassed","Math","round","abs","date2","Date","console","log","Intl","DateTimeFormat","format","formatCurrency","value","NumberFormat","style","displayMovements","sort","innerHTML","movs","slice","a","b","forEach","mov","i","type","displayDate","formattedMov","html","insertAdjacentHTML","calcDisplayBalance","balance","reduce","formattedBalance","textContent","calcDisplaySummary","incomes","filter","out","interest","map","deposit","int","arr","createUsernames","accs","username","toLowerCase","split","name","join","updateUI","startLogoutTimer","tick","min","String","floor","time","padStart","sec","clearInterval","opacity","setInterval","addEventListener","e","preventDefault","find","Number","now","day","month","year","hour","minute","blur","amount","receiverAcc","push","toISOString","some","setTimeout","index","findIndex","splice","sorted","unit","ingredients","pizzaTimer","ing1","ing2","includes","clearTimeout"],"version":3,"file":"index.ce4e3017.js.map"}